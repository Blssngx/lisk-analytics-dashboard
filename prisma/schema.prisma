// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @db.VarChar(255)
  password String @db.VarChar(255)
}

model Token {
  id               String @id @default(uuid())
  name             String @unique // e.g., "L ZAR Coin" or "L USD Coin"
  symbol           String @unique // e.g., "LZAR" or "LUSD"
  contractAddress  String @unique
  decimals         Int    @default(18)
  totalSupply      Decimal @db.Decimal(65, 30) @default(0)
  totalSupplyFormatted String? // e.g., "10576000"
  circulatingSupply String? // e.g., "10576000"
  marketCap        Decimal @db.Decimal(65, 30) @default(0)
  blockNumber      Int? // Block number when token was created
  validated        Int @default(1)
  verifiedContract Boolean @default(false)
  possibleSpam     Boolean @default(false)
  isActive         Boolean @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations to the data models
  dailyMetrics     DailyCumulativeMetrics[]
  uniqueWallets    DailyUniqueWallets[]
  weeklyPayments   WeeklyPayments[]
  priceData        TokenPriceData[]
  transactionActivity TransactionActivity[]
  hourlyActivity   HourlyActivity[]
}

// Stores the cumulative growth data on a daily basis
model DailyCumulativeMetrics {
  id                   String   @id @default(uuid())
  date                 DateTime @db.Date
  cumulativeTxCount    Int
  cumulativeTxAmount   Decimal  @db.Decimal(65, 30) // Use a high precision for crypto amounts
  dailyTxCount         Int      @default(0) // New transactions for this day
  dailyTxAmount        Decimal  @db.Decimal(65, 30) @default(0) // New transaction amount for this day
  
  // Relations to the Token model
  tokenId              String
  token                Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  // Ensures that there is only one entry per token per day
  @@unique([tokenId, date])
  @@index([tokenId, date])
}

// Stores the daily unique wallet count
model DailyUniqueWallets {
  id                String   @id @default(uuid())
  date              DateTime @db.Date
  uniqueWalletCount Int
  newWallets        Int      @default(0) // New wallets for this day
  activeWallets     Int      @default(0) // Wallets that had activity

  // Relations to the Token model
  tokenId           String
  token             Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  // Ensures uniqueness
  @@unique([tokenId, date])
  @@index([tokenId, date])
}

// Stores the weekly interest payment totals
model WeeklyPayments {
  id                  String   @id @default(uuid())
  weekStartDate       DateTime @db.Date
  totalPaymentsAmount Decimal  @db.Decimal(65, 30)
  paymentCount        Int      @default(0) // Number of payments made
  averagePayment      Decimal  @db.Decimal(65, 30) @default(0)

  // Relations to the Token model
  tokenId             String
  token               Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  // Ensures uniqueness
  @@unique([tokenId, weekStartDate])
  @@index([tokenId, weekStartDate])
}

// Stores token price data for price charts
model TokenPriceData {
  id          String   @id @default(uuid())
  timestamp   DateTime
  price       Decimal  @db.Decimal(20, 8)
  volume      Decimal  @db.Decimal(65, 30) @default(0)
  marketCap   Decimal  @db.Decimal(65, 30) @default(0)
  change24h   Decimal  @db.Decimal(10, 4) @default(0) // 24h price change percentage

  // Relations to the Token model
  tokenId     String
  token       Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  // Indexes for efficient querying
  @@index([tokenId, timestamp])
  @@index([timestamp])
}

// Stores transaction activity for heatmap and activity analysis
model TransactionActivity {
  id              String   @id @default(uuid())
  timestamp       DateTime
  transactionHash String?  @db.VarChar(66) // Optional transaction hash
  fromAddress     String   @db.VarChar(42) // Sender address
  toAddress       String   @db.VarChar(42) // Receiver address
  amount          Decimal  @db.Decimal(65, 30)
  gasUsed         Int      @default(0)
  gasPrice        Int      @default(0)
  blockNumber     Int?
  isSuccess       Boolean  @default(true)

  // Relations to the Token model
  tokenId         String
  token           Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  // Indexes for efficient querying
  @@index([tokenId, timestamp])
  @@index([fromAddress])
  @@index([toAddress])
  @@index([timestamp])
}

// Stores hourly activity data for heatmap charts
model HourlyActivity {
  id              String   @id @default(uuid())
  date            DateTime @db.Date
  hour            Int      // 0-23
  transactionCount Int     @default(0)
  totalVolume     Decimal  @db.Decimal(65, 30) @default(0)
  uniqueWallets   Int      @default(0)

  // Relations to the Token model
  tokenId         String
  token           Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  // Ensures uniqueness and provides efficient querying
  @@unique([tokenId, date, hour])
  @@index([tokenId, date])
  @@index([date, hour])
}

// Stores aggregated wallet statistics
model WalletStats {
  id                    String   @id @default(uuid())
  date                  DateTime @db.Date
  totalWallets          Int      @default(0)
  activeWallets         Int      @default(0) // Wallets with transactions
  newWallets            Int      @default(0)
  whaleWallets          Int      @default(0) // Wallets with >1% of supply
  averageBalance        Decimal  @db.Decimal(65, 30) @default(0)
  medianBalance         Decimal  @db.Decimal(65, 30) @default(0)

  // Relations to the Token model
  tokenId               String

  // Ensures uniqueness
  @@unique([tokenId, date])
  @@index([tokenId, date])
}