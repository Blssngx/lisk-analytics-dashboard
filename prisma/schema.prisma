// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  password String
  // Add more user fields as needed (e.g., email, roles)
}

model Token {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  name                 String   @unique
  symbol               String   @unique
  contractAddress      String   @unique
  decimals             Int      @default(18)
  totalSupply          Float    @default(0)
  totalSupplyFormatted String?
  circulatingSupply    String?
  marketCap            Float    @default(0)
  blockNumber          Int?
  validated            Int      @default(1)
  verifiedContract     Boolean  @default(false)
  possibleSpam         Boolean  @default(false)
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  dailyMetrics        DailyCumulativeMetrics[]
  uniqueWallets       DailyUniqueWallets[]
  weeklyPayments      WeeklyPayments[]
  priceData           TokenPriceData[]
  transactionActivity TransactionActivity[]
  hourlyActivity      HourlyActivity[]
  tokenHolders        TokenHolders[]
}

model DailyCumulativeMetrics {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  date               DateTime
  cumulativeTxCount  Int
  cumulativeTxAmount Float
  dailyTxCount       Int      @default(0)
  dailyTxAmount      Float    @default(0)

  // Relations
  tokenId String @db.ObjectId
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([tokenId, date])
}

model DailyUniqueWallets {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime
  uniqueWalletCount Int
  newWallets        Int      @default(0)
  activeWallets     Int      @default(0)

  // Relations
  tokenId String @db.ObjectId
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([tokenId, date])
}

model WeeklyPayments {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  weekStartDate       DateTime
  totalPaymentsAmount Float
  paymentCount        Int      @default(0)
  averagePayment      Float    @default(0)

  // Relations
  tokenId String @db.ObjectId
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([tokenId, weekStartDate])
}

model TokenPriceData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp DateTime
  price     Float
  volume    Float    @default(0)
  marketCap Float    @default(0)
  change24h Float    @default(0)

  // Relations
  tokenId String @db.ObjectId
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId, timestamp])
  @@index([timestamp])
}

model TransactionActivity {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp       DateTime
  transactionHash String?
  fromAddress     String
  toAddress       String
  amount          Float
  gasUsed         Int      @default(0)
  gasPrice        Int      @default(0)
  blockNumber     Int?
  isSuccess       Boolean  @default(true)

  // Relations
  tokenId String @db.ObjectId
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId, timestamp])
  @@index([fromAddress])
  @@index([toAddress])
  @@index([timestamp])
}

model HourlyActivity {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  date             DateTime
  hour             Int
  transactionCount Int      @default(0)
  totalVolume      Float    @default(0)
  uniqueWallets    Int      @default(0)

  // Relations
  tokenId String @db.ObjectId
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([tokenId, date, hour])
  @@index([tokenId, date])
  @@index([date, hour])
}

model WalletStats {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime
  totalWallets   Int      @default(0)
  activeWallets  Int      @default(0)
  newWallets     Int      @default(0)
  whaleWallets   Int      @default(0)
  averageBalance Float    @default(0)
  medianBalance  Float    @default(0)

  // Relations
  tokenId String @db.ObjectId
  // No relation to Token (add if needed)

  @@unique([tokenId, date])
}

model TokenHolders {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  date         DateTime
  totalHolders Int      @default(0)
  totalSupply  Float    @default(0)
  whaleCount   Int      @default(0)
  largeCount   Int      @default(0)
  mediumCount  Int      @default(0)
  smallCount   Int      @default(0)
  holdersData  Json?

  // Relations
  tokenId String @db.ObjectId
  token   Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([tokenId, date])
}
